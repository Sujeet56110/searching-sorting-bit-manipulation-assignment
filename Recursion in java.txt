Recursion in java 
Assignment Answer


 Q1 : Given an integer, find out the sum of its digits using recursion. 
Input: n= 1234 
Output: 10
Explanation: 1+2+3+4=10
package recursion;


import java.util.Scanner;


public class assign_1_AC {
   public static int sumOfDigits(int n) {
       if (n == 0) {
           return 0;
       }
       return (n % 10) + sumOfDigits(n / 10);
   }


   public static void main(String[] args) {
       Scanner sc=new Scanner(System.in);
       System.out.println("enter the number");
       int n = sc.nextInt();
       System.out.println("Sum of digits: " + sumOfDigits(n));
   }
}






 Q2: Given a number n. Find the sum of natural numbers till n but with alternate signs. That means if n = 5 then you have to return 1-2+3-4+5 = 3 as your answer. Constraints : 0<=n<=1e6 
Input1 : n = 10 
Output 1 : -5 
Explanation : 1-2+3-4+5-6+7-8+9-10 = -5 
package recursion;


import java.util.Scanner;


public class assign_2_AC {
    public static int alternateSum(int n) {
        if (n == 0) {
            return 0;
        }
        if (n % 2 == 0) {
            return -n + alternateSum(n - 1);
           }
        else {
            return n + alternateSum(n - 1);
        }
    }
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        System.out.println("enter number :");
        int n =sc.nextInt();
        System.out.println("Output 1 : " + alternateSum(n));


    }


}




Q3: Print the max value of the array [ 13, 1, -3, 22, 5].
package recursion;


public class assign_3_AC {
   public static int findMax(int[] arr, int n) {
       if (n == 1) {
           return arr[0];
       } else {
           return Math.max(arr[n - 1], findMax(arr, n - 1));
       }
   }
   public static void main(String[] args) {
       int[] arr = {13, 1, -3, 22, 5};
       int max = findMax(arr, arr.length);
       System.out.println("The maximum value in the array is: " + max);


   }
}




 Q4 : Find the sum of the values of the array [92, 23, 15, -20, 10].
package recursion;


public class assign_4_AC {




   public static int findSum(int[] arr, int n){
       if (n == 1) {
           return arr[0];
       }
       return arr[n - 1] + findSum(arr, n - 1);
   }
   public static void main(String[] args) {
       int[] arr = {92, 23, 15, -20, 10};
       int sum = findSum(arr, arr.length);
       System.out.println("The sum of the values in the array is: " + sum);
   }
}




 Q5. Given a number n. Print if it is an armstrong number or not. An armstrong number is a number if the sum of every digit in that number raised to the power of total digits in that number is equal to the number. 
Example : 153 = 1^3 + 5^3 + 3^3 = 1 + 125 + 27 = 153 hence 153 is an armstrong number. (Easy)
 Input1 : 153 
Output1 : Yes 
Input 2 : 134 
Output2 : No
package recursion;


import java.util.*;


public class assign_5_AC {
   public static boolean isArmstrong(int n) {
       int originalNumber = n;
       int sum = 0;
       int numDigits = String.valueOf(n).length();
       while (n > 0) {
           int digit = n % 10;
           sum += Math.pow(digit, numDigits);
           n /= 10;
       }
       return sum == originalNumber;
   }
   public static void main(String[] args) {
       Scanner sc=new Scanner(System.in);
       System.out.println("enter the number :");
       int n =sc.nextInt();
       if (isArmstrong(n)) {
           System.out.println(n + " is an Armstrong number.");
       } else {
           System.out.println(n + " is not an Armstrong number.");
       }
   }
}