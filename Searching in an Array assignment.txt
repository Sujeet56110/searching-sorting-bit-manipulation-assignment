Searching in an Array
Assignment Answer


Q1. Given an array. FInd the number X in the array. If the element is present, return the index of the element, else print “Element not found in array”. Input the size of array, array from user and the element X from user. Use Linear Search to find the element.


import java.util.Scanner;


public class assign_1 {
   public static void main(String[] args){
       Scanner sc=new Scanner(System.in);
       System.out.println("enter the number of elements present in array : ");
       int n=sc.nextInt();
       System.out.println("enter elements in array : ");
       int []arr=new int[n];
       for (int i=0; i<n; i++){
           arr[i]=sc.nextInt();
       }
       System.out.println("enter the  target value : ");
       int x=sc.nextInt();
       int idx=-1;
       for (int i=0; i<n; i++){
           if (arr[i]==x){
               idx=i;
               break;
           }
       }
       if (idx==-1){
           System.out.println("target element not found in array");
       }
       else {
           System.out.println("the target element is : "+ idx);
       }
   }
}




Q2. Given an array and an integer “target”, return the last occurrence of “target” in the array. If the target is not present return -1. Input 1: arr = [1 1 1 2 3 4 4 5 6 6 6 6] , target = 4 
Output 1: 6 Input 2: arr = [2 2 2 6 6 18 29 30 30 30] , target = 15 
Output 2: -1


import java.util.Scanner;


public class assign_2 {
   public static int lastOccurrence(int arr[], int x){
       int low=0, high=arr.length-1;
       int result=-1;
       while (low<=high){
           int mid=low+(high-low)/2;
           if (arr[mid]==x){
               result= mid;
               low=mid+1;


           } else if (arr[mid] < x) {
               low=mid+1;
           }
           else {
               high=mid-1;
           }
       }
       return result;
   }
   public static void main(String[] args){
       Scanner sc=new Scanner(System.in);
       System.out.println("enter number of element want in array : ");
       int n=sc.nextInt();
       System.out.println("enter elements in array : ");
       int arr[]=new int[n];
       for (int i=0; i<n; i++){
           arr[i]=sc.nextInt();
       }
       System.out.println("enter target element in array : ");
       int x=sc.nextInt();
       int result=lastOccurrence(arr,x);
       if (result==-1){
           System.out.println("-1");
       }
       else {
           System.out.println("target element is : "+result);       }
        }
   }
}




3. Given a sorted binary array, efficiently count the total number of 1’s in it. Input 1: arr = [0 0 0 0 1 1 1 1 1 1] 
Output 1: 6 
Input 2: arr = [ 0 0 0 0 0 1 1]
Output 2: 2


import java.util.Scanner;


public class assign_3 {
   public static int numberOf1s(int arr[]){
       int  low=0, high=arr.length-1;
       while(low<=high){
           int mid=low+(high-low)/2;
           if (arr[mid]==0){
               low=mid+1;
           }
           else {
               high=mid-1;
           }
       }
       return arr.length-low;
   }
   public static void main(String[] args){
       Scanner sc=new Scanner(System.in);
       System.out.println("enter number of array : ");
       int n=sc.nextInt();
       System.out.println("enter elements in array : ");
       int arr[]=new int[n];
       for (int i=0; i<arr.length; i++){
           arr[i]=sc.nextInt();
       }
       int result=numberOf1s(arr);
       System.out.println("number of 1s present in array is : "+result);
   }
}




Q4. Given a sorted integer array containing duplicates, count occurrences of a given number. If the element is not found in the array, report that as well. Input: nums[] = [2, 5, 5, 5, 6, 6, 8, 9, 9, 9] 
target = 5 
Output: Target 5 occurs 3 times
Input: nums[] = [2, 5, 5, 5, 6, 6, 8, 9, 9, 9] 
target = 6 
Output: Target 6 occurs 2 times


import java.util.Scanner;


public class assign_4 {
   public static int lastOccurrence(int arr[],int x){
       int low=0, high=arr.length-1;
       int  result=-1;
       while(low<=high){
           int mid=low+(high-low)/2;
           if (arr[mid]==x){
               result=mid;
               low=mid+1;
           } else if (arr[mid]<x) {
               low=mid+1;
           }else {
               high=mid-1;
           }
       }
       return result;
   }
   public static int firstOccurrence(int arr[],int x){
       int low=0, high=arr.length-1;
       int  result=-1;
       while(low<=high){
           int mid=low(high-low)/2;
           if (arr[mid]==x){
               result=mid;
               high=mid-1;
           } else if (arr[mid]<x) {
               low=mid+1;
           }else {
               high=mid-1;
           }
       }
       return result;
   }
   public static void main(String[] args){
       Scanner sc=new Scanner(System.in);
       System.out.println("enter number of element in array : ");
       int n=sc.nextInt();
       int arr[]=new int[n];
       System.out.println("enter elements in array : ");
       for (int i=0; i<n; i++){
           arr[i]=sc.nextInt();
       }
       System.out.println("enter target element : ");
       int x=sc.nextInt();
       int first=firstOccurrence(arr,x);
       int last=lastOccurrence(arr,x);


       if (first==last &&  first==-1){
           System.out.println("element not found in an array");
       }else {
           System.out.println("the occurrence of "+x+" is : "+(last-first+1));
       }
   }
}




Q5: Given a positive integer num, return true if num is a perfect square or false otherwise. A perfect square is an integer that is the square of an integer. In other words, it is the product of some integer with itself. 
Example 1: 
Input: num = 16 
Output: true 
Explanation: We return true because 4 * 4 = 16 and 4 is an integer. 
Example 2: 
Input: num = 14 
Output: false 
Explanation: We return false because 3.742 * 3.742 = 14 and 3.742 is not an integer.


import java.util.Scanner;


public class assign_5 {
   public static boolean squareroot(int num){
       int low=0, high=num;
       boolean result=false;
       while(low <= high){
           int mid=low(high-low)/2;
           long val=mid*mid;
           if (val==num){
               return true;
           }
           else if(val<num){
               low=mid+1;
           }else {
               high=mid-1;
           }
       }
       return result;
   }
   public static void main(String []args){
       Scanner sc=new Scanner(System.in);
       System.out.println("enter number which squareroot want to  find : ");
       int num=sc.nextInt();
       boolean result=squareroot(num);
       System.out.println(num+" is perfect square : "+result);
   }
}